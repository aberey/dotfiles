run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

# MOUSE
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' " \
    set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on; "

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  "set -g mouse on"

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

#bind -n WheelUpPane   select-pane -t= \; copy-mode -e \; send-keys -M
#bind -n WheelDownPane select-pane -t= \;                 send-keys -M
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M; send-keys -M; send-keys -M; send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M; send-keys -M; send-keys -M; send-keys -M' 'copy-mode -e; send-keys -M; send-keys -M; send-keys -M; send-keys -M'"
bind -n WheelDownPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M; send-keys -M; send-keys -M; send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M; send-keys -M; send-keys -M; send-keys -M' 'copy-mode -e; send-keys -M; send-keys -M; send-keys -M; send-keys -M'"

# COPY PASTE
# outdated copy mode - replaced by pbcopy below
#bind p paste-buffer
#bind -t vi-copy 'v' begin-selection
#bind -t vi-copy 'y' copy-selection

# bind-key syntax changed in 2.4 -- selection / copy / paste
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \ "
   #bind-key -t vi-copy v   begin-selection; \
   #bind-key -t vi-copy V   send -X select-line; \
   #bind-key -t vi-copy C-v rectangle-toggle; \
   #bind-key -t vi-copy y   copy-pipe 'xclip -selection clipboard -in'"
   # pbcopy pbpaste integration for mac osx
   bind-key -t vi-copy v send-keys -X begin-selection; \
   bind-key -t vi-copy y send-keys -X copy-pipe 'reattach-to-user-namespace pbcopy'; \
   unbind -t vi-copy Enter; \
   bind-key -t vi-copy Enter send-keys -X copy-pipe 'reattach-to-user-namespace pbcopy';"

# Newer versions
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \ "
   #bind-key -T copy-mode-vi v   send -X begin-selection;
   #bind-key -T copy-mode-vi V   send -X select-line; \
   #bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
   #bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'"
   # pbcopy pbpaste integration for mac osx
   bind-key -T copy-mode-vi v send-keys -X begin-selection; \
   bind-key -T copy-mode-vi y send-keys -X copy-pipe 'reattach-to-user-namespace pbcopy'; \
   unbind -T copy-mode-vi Enter; \
   bind-key -T copy-mode-vi Enter send-keys -X copy-pipe 'reattach-to-user-namespace pbcopy';"


# Setting the prefix from C-b to C-a
set -g prefix C-a

# Free the original Ctrl-b prefix keybinding
unbind C-b

# Ensure that we can send Ctrl-A to other apps
bind C-a send-prefix

# Set the base index for windows to 1 instead of 0
set -g base-index 1

# Set the base index for panes to 1 instead of 0
setw -g pane-base-index 1

bind + run "if [[ $(tmux list-window) =~ ZOOM ]]; then tmux last-window; tmux swap-pane -s ZOOM.1; tmux kill-window -t ZOOM; else tmux new-window -d -n ZOOM; tmux swap-pane -s ZOOM.1; tmux select-window -t ZOOM;fi"

# set shell to zsh
if-shell -b 'type reattach-to-user-namespace > /dev/null' " \
  set -g default-command \"reattach-to-user-namespace -l $SHELL\" "
set -g default-shell $SHELL

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity off  # to disable annoying notification messages

# enable vi keys.
setw -g mode-keys vi

#unbind [
#bind Escape copy-mode
unbind p
bind p run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

set-option -g status-justify "centre"
set-option -g status-left-length 80
set-option -g status-right-length 80

# outdated tmux-powerline - now using powerline
#set-option -g status-left "#(~/tmux-powerline/status-left.sh)"
#set-option -g status-right "#(~/tmux-powerline/status-right.sh)"
#
#source {{powerline_path.stdout}}/bindings/tmux/powerline.conf

# powerline has been superceded by tmuxline.vim (see below)
#run-shell "powerline-daemon -q"
# todo: refactor this into powerline home detection
#if-shell -b '[ -f /usr/share/powerline/bindings/tmux/powerline.conf ]' " \
  #source /usr/share/powerline/bindings/tmux/powerline.conf"
#if-shell -b '[ -f ~/Library/Python/2.7/lib/python/site-packages/powerline/bindings/tmux/powerline.conf ]' " \
  #source ~/Library/Python/2.7/lib/python/site-packages/powerline/bindings/tmux/powerline.conf"
#source ~/.local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf

# List of plugins
# Supports `github_username/repo` or full git URLs
set -g @tpm_plugins "              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tmux-resurrect      \
  tmux-plugins/tmux-pain-control   \
  tmux-plugins/tmux-yank           \
  tmux-plugins/tmux-continuum      \
"

# restore session on restart
set -g @continuum-restore 'on'

# New window with default path set to last path
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# save/restore sessions
set -g @resurrect-save 's'
set -g @resurrect-restore 'r'

# initializes TMUX plugin manager
run-shell ~/.tmux/plugins/tpm/tpm

# source theme generated using :Tmuxline lightline_insert and :TmuxlineSnapshot .tmuxline.conf in vim using tmuxline.vim
if-shell "test -f ~/.tmuxline.conf" "source ~/.tmuxline.conf"
